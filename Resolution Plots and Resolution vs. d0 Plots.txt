#
#import libraries and read in sample


import ROOT as rt
import numpy as np
import time
f = rt.TFile("[INSERT SAMPLE DIRECTORY]",'read')
tree = f.Get("L1TrackNtuple/eventTree")


#
#set mins,maxs, and number of bins


ptBin = 50.
ptMin = 10.
ptMax = 100.

etaBin = 50.
etaMin = -2.5
etaMax = 2.5

d0Bin = 100.
d0Min = -50.
d0Max = 50.


#
#create arrays with track values


pt = [i for evt in tree for i in evt.tp_pt]
eta = [i for evt in tree for i in evt.tp_eta]
d0 = [i for evt in tree for i in evt.tp_d0] 
pt_match = [(abs(i) != 999,i) for evt in tree for i in evt.matchtrk_pt]
eta_match = [(abs(i) != 999,i) for evt in tree for i in evt.matchtrk_eta]
d0_match = [(abs(i) != 999,i) for evt in tree for i in evt.matchtrk_d0]
id = [i for evt in tree for i in evt.tp_pdgid] 


#
#zip files together to make cuts easier


pt_compare = zip(pt,pt_match,d0,id,eta)
eta_compare = zip(eta,eta_match,d0,id,pt)
d0_compare = zip(d0,d0_match,id,pt,eta)


#
#make cuts to each array


pt_compare_cut = [i for i in pt_compare if not np.isnan(i[0]) and 30 < i[0] and abs(i[3]) == 13 and abs(i[4]) < 2]
eta_compare_cut = [i for i in eta_compare if not np.isnan(i[0]) and abs(i[3]) == 13 and 30 < i[4] and abs(i[0]) < 2]
d0_compare_cut = [i for i in d0_compare if not np.isnan(i[0]) and abs(i[2]) == 13 and 30 < i[3] and abs(i[4]) < 2]


#
#construct resolution (i.e. genuine value - reconstructed value) plots


h_ptGvR = rt.TH1F('h_ptGvR','(Genuine - Reconstructed) pT Values',50,-35,35)
h_etaGvR = rt.TH1F('h_etaGvR','(Genuine - Reconstructed) #eta Values',50,-.2,.2)
h_d0GvR = rt.TH1F('h_d0GvR','(Genuine - Reconstructed) d_{0} Values',50,-10,10)


#
#construct resolution vs. d0 plots


h_d0Vd0 = rt.TH2F('h_d0Vd0','Genuine d_{0} Values vs. (Genuine - Reconstructed) d_{0} Values',int(d0Bin),-25,25,int(d0Bin),-20,20)
h_d0Vpt = rt.TH2F('h_d0Vpt','Genuine d_{0} Values vs. (Genuine - Reconstructed) pT Values',int(ptBin),-40,40,int(d0Bin),-10,10)
h_d0Veta = rt.TH2F('h_d0Veta','Genuine d_{0} Values vs. (Genuine - Reconstructed) #eta Values',int(etaBin),-1,1,int(d0Bin),-10,10)


#
#fill all plots with values


for i in pt_compare_cut:
     if i[1][0]:
          h_ptGvR.Fill(i[0] - i[1][1])
          h_d0Vpt.Fill(i[0] - i[1][1],i[2])

for i in eta_compare_cut:
     if i[1][0]:
          h_etaGvR.Fill(i[0] - i[1][1])
          h_d0Veta.Fill(i[0] - i[1][1],i[2])

for i in d0_compare_cut:
     if i[1][0]:
          h_d0GvR.Fill(i[0] - i[1][1])
          h_d0Vd0.Fill(i[0] - i[1][1],i[0])


#
#draw resolution plots


h_ptGvR.GetXaxis().SetTitle('(Gen - Reco) Transverse Momentum [GeV]')
h_ptGvR.GetYaxis().SetTitle('Counts per Bin')
h_ptGvR.Draw()

h_etaGvR.GetXaxis().SetTitle('(Gen - Reco) Psuedorapidity')
h_etaGvR.GetYaxis().SetTitle('Counts per Bin')
h_etaGvR.Draw()

h_d0GvR.GetXaxis().SetTitle('(Gen - Reco) Transverse Impact Parameter [cm]')
h_d0GvR.GetYaxis().SetTitle('Counts per Bin')
h_d0GvR.Draw()


#
#draw resolution vs. d0 plots


h_d0Vd0.GetXaxis().SetTitle('(Gen - Reco) Transverse Impact Parameter [cm]')
h_d0Vd0.GetYaxis().SetTitle('Transverse Impact Parameter [cm]')
h_d0Vd0.Draw()

h_d0Vpt.GetXaxis().SetTitle('(Gen - Reco) Transverse Momentum [GeV]')
h_d0Vpt.GetYaxis().SetTitle('Transverse Impact Parameter [cm]')
h_d0Vpt.Draw()

h_d0Veta.GetXaxis().SetTitle('(Gen - Reco) Psuedorapidity')
h_d0Veta.GetYaxis().SetTitle('Transverse Impact Parameter [cm]')
h_d0Veta.Draw()